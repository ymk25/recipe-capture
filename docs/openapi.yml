openapi: 3.0.3
info:
  title: RecipeCapture API
  description: |
    YouTube料理動画からのレシピ自動抽出APIサービス（Firebase Functions版）

    ## Serverless Architecture
    本APIはFirebase Functions (2nd Gen)上で動作するサーバーレスアーキテクチャです。

    ## 重要な特性
    - **Cold Start**: 初回リクエスト時に10-15秒の遅延が発生する可能性があります
    - **Timeout**: 長時間処理（解析）は最大9分（540秒）です
    - **Concurrent Limits**: Function並列実行制限があります
    - **Auto Scaling**: トラフィックに応じて自動スケールします

    ## 非同期処理パターン
    重い処理（レシピ解析）は以下のパターンで動作します：
    1. POST /analyze → 202 Accepted + analysisId
    2. GET /analyze/{analysisId}/status → 進行状況確認
    3. Firestore リアルタイムリスナー → 結果の即座な取得

    ## 認証
    すべてのAPIエンドポイントはFirebase ID Tokenによる認証が必要です。

    ## レート制限
    - 無料ユーザー: 1日3回のレシピ解析
    - プレミアムユーザー: 1日20回のレシピ解析
    - Function並列実行: 最大50リクエスト/分

    ## エラーハンドリング
    サーバーレス特有のエラー（Function timeout、メモリ制限等）を含む
    統一されたエラーレスポンス形式で返却されます。
  version: 1.0.0
  contact:
    name: RecipeCapture API Support
    email: support@recipecapture.app

servers:
  - url: https://asia-northeast1-recipecapture.cloudfunctions.net/api/v1
    description: Firebase Functions (Direct)
  - url: https://api.recipecapture.app/v1
    description: Custom Domain (Recommended)
  - url: http://localhost:5001/recipecapture-dev/asia-northeast1/api/v1
    description: Local Development (Firebase Emulator)

paths:
  /analyze:
    post:
      summary: YouTube動画からレシピを解析（非同期処理）
      description: |
        指定されたYouTube動画URLから料理レシピを自動抽出します。
        
        ## 処理フロー
        1. **即座レスポンス**: analysisId と推定時間を返却（202 Accepted）
        2. **進行状況確認**: `/analyze/{analysisId}/status` で状況取得
        3. **リアルタイム更新**: Firestore listener で結果を即座に受信
        
        ## 処理時間
        - 通常: 2-3分
        - Cold Start時: 追加で10-15秒
        - 最大: 9分（タイムアウト）
        
        ## Function 仕様
        - Memory: 2GiB
        - CPU: 2 cores
        - Timeout: 540秒
        - Max Instances: 10
      operationId: analyzeVideoAsync
      tags:
        - Recipe Analysis
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
            examples:
              basic:
                summary: 基本的な解析リクエスト
                value:
                  youtubeUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
                  options:
                    includeAudio: true
                    includeCaptions: true
                    includeDescription: true
      responses:
        '202':
          description: 解析開始（非同期処理）
          headers:
            X-Function-Execution-Id:
              description: Function実行ID（デバッグ用）
              schema:
                type: string
            X-Function-Region:
              description: 実行リージョン
              schema:
                type: string
                example: "asia-northeast1"
            X-Cold-Start:
              description: Cold Startが発生したか
              schema:
                type: boolean
            X-RateLimit-Remaining:
              description: 残り実行可能回数
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncAnalyzeResponse'
              example:
                success: true
                data:
                  analysisId: "analysis_abc123def456"
                  status: "queued"
                  estimatedTimeSeconds: 180
                  websocketUrl: "wss://firestore.googleapis.com/..."
                  progressEndpoint: "/analyze/analysis_abc123def456/status"
        '400':
          description: 無効なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'
              examples:
                invalid_url:
                  summary: 無効なYouTube URL
                  value:
                    success: false
                    error:
                      code: "INVALID_YOUTUBE_URL"
                      message: "有効なYouTube URLを入力してください"
                      details:
                        field: "youtubeUrl"
                        value: "invalid_url"
                      functionName: "analyzeYouTubeVideo"
                not_cooking_video:
                  summary: 料理動画以外
                  value:
                    success: false
                    error:
                      code: "NOT_COOKING_CONTENT"
                      message: "この動画は料理関連のコンテンツではありません"
                      details:
                        confidence: 0.15
                        detectedCategory: "music"
        '403':
          description: 利用制限に達している
          headers:
            X-RateLimit-Limit-User:
              description: ユーザー別制限
              schema:
                type: integer
            X-RateLimit-Reset:
              description: 制限リセット時刻（Unix timestamp）
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'
              examples:
                daily_limit:
                  summary: 1日の解析制限
                  value:
                    success: false
                    error:
                      code: "DAILY_LIMIT_EXCEEDED"
                      message: "1日の解析制限に達しました。プレミアムプランにアップグレードするか、明日再度お試しください。"
                      retryAfter: 43200
        '429':
          description: レート制限超過
          headers:
            X-RateLimit-Limit-Function:
              description: Function同時実行制限
              schema:
                type: integer
            X-RateLimit-Reset:
              description: 制限リセット時刻
              schema:
                type: integer
            Retry-After:
              description: リトライまでの推奨秒数
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'
              examples:
                function_limit:
                  summary: Function並列実行制限
                  value:
                    success: false
                    error:
                      code: "CONCURRENT_LIMIT_EXCEEDED"
                      message: "同時実行数の上限に達しました。しばらく待ってから再試行してください。"
                      retryAfter: 60
                      functionName: "analyzeYouTubeVideo"
        '503':
          description: Function実行制限
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'
              examples:
                timeout:
                  summary: Function タイムアウト
                  value:
                    success: false
                    error:
                      code: "FUNCTION_TIMEOUT"
                      message: "処理がタイムアウトしました。動画が長すぎる可能性があります。"
                      details:
                        timeoutSeconds: 540
                        videoDuration: 3600
                memory_exceeded:
                  summary: メモリ制限超過
                  value:
                    success: false
                    error:
                      code: "MEMORY_EXCEEDED"
                      message: "メモリ制限を超過しました。動画の処理が複雑すぎる可能性があります。"
                      functionName: "analyzeYouTubeVideo"

  /analyze/{analysisId}/status:
    get:
      summary: 解析状況を取得
      description: |
        進行中の解析の詳細な状況を取得します。
        
        ## 状況の段階
        1. **queued**: キュー待機中
        2. **processing**: 処理中（段階的な進行状況あり）
        3. **completed**: 完了
        4. **failed**: 失敗
        5. **cancelled**: キャンセル
        
        ## リアルタイム更新
        Firestore リアルタイムリスナーの使用を推奨します：
        ```javascript
        const unsubscribe = onSnapshot(
          doc(db, 'analysis_logs', analysisId),
          (doc) => console.log(doc.data())
        );
        ```
      operationId: getAnalysisStatus
      tags:
        - Recipe Analysis
      security:
        - firebaseAuth: []
      parameters:
        - name: analysisId
          in: path
          required: true
          schema:
            type: string
          description: 解析ID
          example: "analysis_abc123def456"
      responses:
        '200':
          description: 解析状況
          headers:
            X-Function-Execution-Id:
              schema:
                type: string
            X-Execution-Time:
              description: 実行時間（ミリ秒）
              schema:
                type: integer
            Cache-Control:
              description: キャッシュ制御（進行中は no-cache）
              schema:
                type: string
                example: "no-cache, no-store, must-revalidate"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisStatusResponse'
              examples:
                processing:
                  summary: 処理中
                  value:
                    success: true
                    data:
                      analysisId: "analysis_abc123def456"
                      status: "processing"
                      progress:
                        stage: "audio"
                        percentage: 50
                        message: "音声解析中..."
                        currentStep: "Speech-to-Text API処理"
                      estimatedTimeRemaining: 90
                      performance:
                        startedAt: "2025-07-13T10:30:00.000Z"
                        elapsedSeconds: 90
                completed:
                  summary: 完了
                  value:
                    success: true
                    data:
                      analysisId: "analysis_abc123def456"
                      status: "completed"
                      progress:
                        stage: "completed"
                        percentage: 100
                        message: "解析完了"
                      result:
                        recipeId: "recipe_def456ghi789"
                        confidence: 0.92
                      performance:
                        totalTimeSeconds: 165
                        tokensUsed:
                          gemini: 45000
                          speechToText: 840
        '404':
          description: 解析IDが見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'

  /recipes:
    get:
      summary: レシピ一覧を取得
      description: |
        ユーザーの保存済みレシピ一覧を取得します。
        
        ## Function 仕様
        - Memory: 256MiB
        - Timeout: 60秒
        - 軽量なCRUD操作用Function
      operationId: getRecipes
      tags:
        - Recipe Management
      security:
        - firebaseAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: ページ番号
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: 1ページあたりの件数
        - name: search
          in: query
          schema:
            type: string
          description: 検索キーワード
        - name: tags
          in: query
          schema:
            type: array
            items:
              type: string
          description: タグフィルター
        - name: favorite
          in: query
          schema:
            type: boolean
          description: お気に入りのみ
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [createdAt, updatedAt, recipeName, cookingTime]
            default: createdAt
          description: ソート項目
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: ソート順
      responses:
        '200':
          description: レシピ一覧
          headers:
            X-Function-Execution-Id:
              schema:
                type: string
            X-Cache-Status:
              description: キャッシュ状態
              schema:
                type: string
                enum: [hit, miss, skip]
            X-Total-Count:
              description: 総件数
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeListResponse'

    post:
      summary: レシピを保存
      description: |
        新しいレシピを保存します。
        
        ## Firestore Integration
        保存と同時に以下のトリガーが実行されます：
        - 自動タグ付けFunction
        - 利用統計更新Function
        - デバイス間同期通知Function
      operationId: saveRecipe
      tags:
        - Recipe Management
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecipeRequest'
      responses:
        '201':
          description: レシピ作成成功
          headers:
            X-Function-Execution-Id:
              schema:
                type: string
            X-Sync-Triggered:
              description: 同期処理がトリガーされたか
              schema:
                type: boolean
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeResponse'
        '400':
          description: 無効なリクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'

  /recipes/{recipeId}:
    get:
      summary: レシピ詳細を取得
      description: 指定されたレシピの詳細情報を取得します。
      operationId: getRecipe
      tags:
        - Recipe Management
      security:
        - firebaseAuth: []
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: レシピID
      responses:
        '200':
          description: レシピ詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeResponse'
        '404':
          description: レシピが見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'

    put:
      summary: レシピを更新
      description: |
        既存のレシピを更新します。
        
        ## 競合解決
        マルチデバイス環境での競合解決機能が自動で動作します：
        - 最終更新時刻ベースの競合検出
        - 自動マージまたはユーザー選択
      operationId: updateRecipe
      tags:
        - Recipe Management
      security:
        - firebaseAuth: []
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: レシピID
        - name: If-Match
          in: header
          schema:
            type: string
          description: 楽観的ロック用のETag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecipeRequest'
      responses:
        '200':
          description: レシピ更新成功
          headers:
            ETag:
              description: 更新後のバージョン
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeResponse'
        '409':
          description: 競合が発生
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'

    delete:
      summary: レシピを削除
      description: 指定されたレシピを削除します。
      operationId: deleteRecipe
      tags:
        - Recipe Management
      security:
        - firebaseAuth: []
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: レシピID
      responses:
        '204':
          description: レシピ削除成功
        '404':
          description: レシピが見つからない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'

  /recipes/{recipeId}/export:
    post:
      summary: レシピをエクスポート（非同期処理）
      description: |
        レシピをPDFまたはCSV形式でエクスポートします（プレミアム機能）。
        
        ## 非同期処理
        大きなレシピや画像を含む場合は非同期で処理されます：
        1. POST /export → 202 Accepted + exportId
        2. Cloud Storage トリガーで処理完了通知
        3. 24時間有効なダウンロードURL生成
        
        ## Function 仕様
        - Memory: 1GiB
        - Timeout: 120秒
        - PDF生成用の追加メモリ
      operationId: exportRecipeAsync
      tags:
        - Recipe Management
      security:
        - firebaseAuth: []
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
          description: レシピID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequest'
      responses:
        '200':
          description: エクスポート成功（同期）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'
        '202':
          description: エクスポート開始（非同期）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncExportResponse'
        '403':
          description: プレミアム機能です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'

  /user/profile:
    get:
      summary: ユーザープロフィールを取得
      description: 現在のユーザーのプロフィール情報を取得します。
      operationId: getUserProfile
      tags:
        - User Management
      security:
        - firebaseAuth: []
      responses:
        '200':
          description: ユーザープロフィール
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

    put:
      summary: ユーザープロフィールを更新
      description: ユーザーのプロフィール情報を更新します。
      operationId: updateUserProfile
      tags:
        - User Management
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: プロフィール更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

  /user/devices:
    get:
      summary: 登録デバイス一覧を取得
      description: ユーザーの登録済みデバイス一覧を取得します。
      operationId: getUserDevices
      tags:
        - Device Management
      security:
        - firebaseAuth: []
      responses:
        '200':
          description: デバイス一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceListResponse'

    post:
      summary: 新しいデバイスを登録
      description: |
        現在のデバイスを登録または更新します。
        
        ## デバイス制限
        - 無料ユーザー: 3デバイスまで
        - プレミアムユーザー: 5デバイスまで
      operationId: registerDevice
      tags:
        - Device Management
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceRequest'
      responses:
        '201':
          description: デバイス登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResponse'

  /sync/status:
    get:
      summary: 同期状況を取得
      description: |
        現在の同期状況と未同期アイテム数を取得します。
        
        ## リアルタイム同期
        Firestore リアルタイムリスナーによる自動同期状況も併せて確認できます。
      operationId: getSyncStatus
      tags:
        - Data Sync
      security:
        - firebaseAuth: []
      responses:
        '200':
          description: 同期状況
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatusResponse'

  /sync/trigger:
    post:
      summary: 手動同期を実行
      description: |
        手動でデータ同期を実行します。
        
        ## Background Function
        重い同期処理は Background Function で実行されます：
        - 競合解決処理
        - 大量データの同期
        - デバイス間の整合性チェック
      operationId: triggerSync
      tags:
        - Data Sync
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerSyncRequest'
      responses:
        '200':
          description: 同期開始成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResponse'

  /health:
    get:
      summary: API健康状態チェック
      description: |
        Firebase Functions の健康状態とパフォーマンス情報を取得します。
        
        ## 監視情報
        - Cold Start状況
        - 平均レスポンス時間
        - エラー率
        - 現在の同時実行数
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: システム正常
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: システム異常
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerlessErrorResponse'

components:
  securitySchemes:
    firebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Firebase ID Token

  schemas:
    # ===== 基本スキーマ =====
    AnalyzeRequest:
      type: object
      required:
        - youtubeUrl
      properties:
        youtubeUrl:
          type: string
          format: uri
          description: YouTube動画のURL
          example: "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
          pattern: '^https:\/\/(www\.)?youtube\.com\/watch\?v=.+$'
        options:
          type: object
          properties:
            includeAudio:
              type: boolean
              default: true
              description: 音声解析を含める
            includeCaptions:
              type: boolean
              default: true
              description: 字幕解析を含める
            includeDescription:
              type: boolean
              default: true
              description: 説明文解析を含める
            priority:
              type: string
              enum: [normal, high]
              default: normal
              description: 処理優先度（プレミアムユーザーのみ）
            webhookUrl:
              type: string
              format: uri
              description: 完了通知用Webhook URL（オプション）

    # ===== サーバーレス対応レスポンス =====
    AsyncAnalyzeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            analysisId:
              type: string
              description: 解析ID（進行状況確認用）
              example: "analysis_abc123def456"
            status:
              type: string
              enum: [queued, processing]
              description: 初期状態
            estimatedTimeSeconds:
              type: integer
              description: 推定完了時間（秒）
              example: 180
            websocketUrl:
              type: string
              format: uri
              description: リアルタイム更新用WebSocket URL
            progressEndpoint:
              type: string
              description: 進行状況確認用エンドポイント
              example: "/analyze/analysis_abc123def456/status"
            functionInfo:
              type: object
              properties:
                region:
                  type: string
                  example: "asia-northeast1"
                memory:
                  type: string
                  example: "2GiB"
                timeout:
                  type: integer
                  example: 540

    AnalysisStatusResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            analysisId:
              type: string
            status:
              type: string
              enum: [queued, processing, completed, failed, cancelled]
            progress:
              type: object
              properties:
                stage:
                  type: string
                  enum: [validation, metadata, audio, analysis, saving, completed]
                percentage:
                  type: integer
                  minimum: 0
                  maximum: 100
                message:
                  type: string
                  example: "音声解析中..."
                currentStep:
                  type: string
                  example: "Speech-to-Text API処理"
            estimatedTimeRemaining:
              type: integer
              description: 推定残り時間（秒）
            result:
              $ref: '#/components/schemas/Recipe'
            performance:
              type: object
              properties:
                startedAt:
                  type: string
                  format: date-time
                elapsedSeconds:
                  type: integer
                totalTimeSeconds:
                  type: integer
                tokensUsed:
                  type: object
                  properties:
                    gemini:
                      type: integer
                    speechToText:
                      type: integer
            errors:
              type: array
              items:
                type: object
                properties:
                  stage:
                    type: string
                  message:
                    type: string
                  retryCount:
                    type: integer

    # ===== サーバーレス特有のエラーレスポンス =====
    ServerlessErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: エラーコード
              enum: 
                - INVALID_YOUTUBE_URL
                - NOT_COOKING_CONTENT
                - DAILY_LIMIT_EXCEEDED
                - CONCURRENT_LIMIT_EXCEEDED
                - FUNCTION_TIMEOUT
                - MEMORY_EXCEEDED
                - RESOURCE_EXHAUSTED
                - COLD_START_TIMEOUT
                - EXTERNAL_API_ERROR
            message:
              type: string
              description: エラーメッセージ
            details:
              type: object
              description: エラー詳細情報
              additionalProperties: true
            functionName:
              type: string
              description: エラー発生Function名
              example: "analyzeYouTubeVideo"
            executionId:
              type: string
              description: Function実行ID（デバッグ用）
            retryAfter:
              type: integer
              description: リトライまでの推奨秒数
            timestamp:
              type: string
              format: date-time
              description: エラー発生時刻

    ConflictErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "CONFLICT_DETECTED"
            message:
              type: string
              example: "データ競合が検出されました"
            conflictInfo:
              type: object
              properties:
                conflictType:
                  type: string
                  enum: [version, concurrent_edit, device_specific]
                localVersion:
                  type: string
                remoteVersion:
                  type: string
                lastModifiedBy:
                  type: string
                conflictResolutionOptions:
                  type: array
                  items:
                    type: string
                    enum: [use_local, use_remote, merge, manual]

    # ===== エクスポート関連 =====
    AsyncExportResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            exportId:
              type: string
              description: エクスポートID
            status:
              type: string
              enum: [queued, processing]
            estimatedTimeSeconds:
              type: integer
            format:
              type: string
              enum: [pdf, csv]
            progressEndpoint:
              type: string
              example: "/exports/export_123/status"

    # ===== システム健康状態 =====
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        region:
          type: string
          example: "asia-northeast1"
        functions:
          type: object
          properties:
            api:
              $ref: '#/components/schemas/FunctionHealth'
            analysis:
              $ref: '#/components/schemas/FunctionHealth'
            export:
              $ref: '#/components/schemas/FunctionHealth'
        externalServices:
          type: object
          properties:
            youtubeApi:
              $ref: '#/components/schemas/ServiceHealth'
            geminiApi:
              $ref: '#/components/schemas/ServiceHealth'
            speechToTextApi:
              $ref: '#/components/schemas/ServiceHealth'
        performance:
          type: object
          properties:
            averageResponseTime:
              type: integer
              description: 平均レスポンス時間（ミリ秒）
            errorRate:
              type: number
              description: エラー率（0-1）
            coldStartRate:
              type: number
              description: Cold Start率（0-1）
            currentConcurrency:
              type: integer
              description: 現在の同時実行数

    FunctionHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        lastExecution:
          type: string
          format: date-time
        averageExecutionTime:
          type: integer
          description: 平均実行時間（ミリ秒）
        errorRate:
          type: number
          description: エラー率（0-1）
        memoryUtilization:
          type: number
          description: メモリ使用率（0-1）
        coldStartCount:
          type: integer
          description: 直近1時間のCold Start回数

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [available, degraded, unavailable]
        latency:
          type: integer
          description: 平均レスポンス時間（ミリ秒）
        lastCheck:
          type: string
          format: date-time

    # ===== 既存スキーマ（変更なし） =====
    Recipe:
      type: object
      properties:
        id:
          type: string
          description: レシピID
        recipeName:
          type: string
          description: レシピ名
        description:
          type: string
          description: レシピ説明
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
        cookingTime:
          $ref: '#/components/schemas/CookingTime'
        servings:
          type: string
          description: 人数
          example: "2-3人分"
        nutrition:
          $ref: '#/components/schemas/Nutrition'
        tags:
          type: array
          items:
            type: string
          description: タグ
        videoInfo:
          $ref: '#/components/schemas/VideoInfo'
        userInteraction:
          $ref: '#/components/schemas/UserInteraction'
        analysisInfo:
          type: object
          properties:
            version:
              type: string
              description: 解析エンジンバージョン
            confidence:
              type: number
              description: 信頼度 (0-1)
            functionExecutionId:
              type: string
              description: 解析実行時のFunction ID
            processingTime:
              type: integer
              description: 処理時間（ミリ秒）
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Ingredient:
      type: object
      required:
        - name
        - amount
        - unit
      properties:
        name:
          type: string
          description: 材料名
          example: "鶏もも肉"
        amount:
          type: string
          description: 分量
          example: "500"
        unit:
          type: string
          description: 単位
          example: "g"
        category:
          type: string
          description: カテゴリ
          example: "meat"
        optional:
          type: boolean
          default: false
          description: オプション材料

    Instruction:
      type: object
      required:
        - step
        - description
      properties:
        step:
          type: integer
          description: ステップ番号
          example: 1
        description:
          type: string
          description: 手順説明
          example: "鶏肉を一口大に切る"
        duration:
          type: string
          description: 所要時間
          example: "5分"
        temperature:
          type: string
          description: 温度
          example: "180°C"
        tips:
          type: string
          description: コツ・注意点

    CookingTime:
      type: object
      properties:
        prep:
          type: integer
          description: 下ごしらえ時間（分）
          example: 15
        cook:
          type: integer
          description: 調理時間（分）
          example: 30
        total:
          type: integer
          description: 合計時間（分）
          example: 45
        difficulty:
          type: string
          enum: [easy, medium, hard]
          description: 難易度

    Nutrition:
      type: object
      properties:
        calories:
          type: integer
          description: カロリー
        protein:
          type: number
          description: タンパク質（g）
        carbs:
          type: number
          description: 炭水化物（g）
        fat:
          type: number
          description: 脂質（g）

    VideoInfo:
      type: object
      properties:
        youtubeId:
          type: string
          description: YouTube動画ID
        title:
          type: string
          description: 動画タイトル
        channelName:
          type: string
          description: チャンネル名
        channelId:
          type: string
          description: チャンネルID
        duration:
          type: string
          description: 動画長さ（ISO 8601）
        thumbnail:
          type: string
          format: uri
          description: サムネイルURL
        publishedAt:
          type: string
          format: date-time
          description: 公開日
        viewCount:
          type: integer
          description: 再生回数

    UserInteraction:
      type: object
      properties:
        favorite:
          type: boolean
          description: お気に入り
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: 評価
        notes:
          type: string
          description: ユーザーメモ
        lastViewed:
          type: string
          format: date-time
          description: 最終閲覧日
        viewCount:
          type: integer
          description: 閲覧回数

    CreateRecipeRequest:
      type: object
      required:
        - recipeName
        - ingredients
        - instructions
      properties:
        recipeName:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        ingredients:
          type: array
          minItems: 1
          maxItems: 50
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/Instruction'
        cookingTime:
          $ref: '#/components/schemas/CookingTime'
        servings:
          type: string
        tags:
          type: array
          items:
            type: string

    UpdateRecipeRequest:
      type: object
      properties:
        recipeName:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        ingredients:
          type: array
          minItems: 1
          maxItems: 50
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/Instruction'
        cookingTime:
          $ref: '#/components/schemas/CookingTime'
        servings:
          type: string
        tags:
          type: array
          items:
            type: string
        userInteraction:
          $ref: '#/components/schemas/UserInteraction'

    RecipeResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Recipe'

    RecipeListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            recipes:
              type: array
              items:
                $ref: '#/components/schemas/Recipe'
            pagination:
              type: object
              properties:
                page:
                  type: integer
                limit:
                  type: integer
                total:
                  type: integer
                totalPages:
                  type: integer
                hasNext:
                  type: boolean
                hasPrev:
                  type: boolean

    ExportRequest:
      type: object
      required:
        - format
      properties:
        format:
          type: string
          enum: [pdf, csv]
          description: エクスポート形式
        options:
          type: object
          properties:
            includeImages:
              type: boolean
              default: true
              description: 画像を含める（PDF）
            layout:
              type: string
              enum: [compact, standard, detailed]
              default: standard
              description: レイアウト（PDF）
            language:
              type: string
              enum: [ja, en]
              default: ja
              description: 言語

    ExportResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            downloadUrl:
              type: string
              format: uri
              description: ダウンロードURL（24時間有効）
            fileName:
              type: string
              description: ファイル名
            fileSize:
              type: integer
              description: ファイルサイズ（バイト）
            expiresAt:
              type: string
              format: date-time
              description: URL有効期限

    UserProfileResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            uid:
              type: string
            email:
              type: string
            displayName:
              type: string
            photoURL:
              type: string
              format: uri
            preferences:
              type: object
              properties:
                language:
                  type: string
                notifications:
                  type: boolean
                theme:
                  type: string
                  enum: [light, dark, auto]
                defaultServings:
                  type: integer
            usage:
              type: object
              properties:
                dailyAnalysisCount:
                  type: integer
                totalRecipes:
                  type: integer
                totalAnalysis:
                  type: integer
            createdAt:
              type: string
              format: date-time

    UpdateUserProfileRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 100
        preferences:
          type: object
          properties:
            language:
              type: string
              enum: [ja, en]
            notifications:
              type: boolean
            theme:
              type: string
              enum: [light, dark, auto]
            defaultServings:
              type: integer
              minimum: 1
              maximum: 20

    RegisterDeviceRequest:
      type: object
      required:
        - deviceInfo
      properties:
        deviceInfo:
          type: object
          required:
            - deviceId
            - platform
            - deviceName
            - osVersion
            - appVersion
          properties:
            deviceId:
              type: string
              description: ユニークデバイスID
            platform:
              type: string
              enum: [ios, android]
            deviceName:
              type: string
              description: デバイス名
              example: "iPhone 15 Pro"
            osVersion:
              type: string
              description: OSバージョン
              example: "17.0"
            appVersion:
              type: string
              description: アプリバージョン
              example: "1.0.0"
            screenSize:
              type: object
              properties:
                width:
                  type: integer
                height:
                  type: integer
        settings:
          type: object
          properties:
            autoSync:
              type: boolean
              default: true
            syncOnCellular:
              type: boolean
              default: false
            backgroundSync:
              type: boolean
              default: true
            notificationEnabled:
              type: boolean
              default: true
        fcmToken:
          type: string
          description: プッシュ通知用FCMトークン

    DeviceResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Device'

    DeviceListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            devices:
              type: array
              items:
                $ref: '#/components/schemas/Device'
            currentDevice:
              type: string
              description: 現在のデバイスID

    Device:
      type: object
      properties:
        id:
          type: string
          description: デバイスID
        deviceInfo:
          type: object
          properties:
            deviceId:
              type: string
            platform:
              type: string
              enum: [ios, android]
            deviceName:
              type: string
            osVersion:
              type: string
            appVersion:
              type: string
        authentication:
          type: object
          properties:
            lastLoginAt:
              type: string
              format: date-time
            lastActiveAt:
              type: string
              format: date-time
            loginMethod:
              type: string
              enum: [email, google]
            isActive:
              type: boolean
        syncInfo:
          type: object
          properties:
            lastSyncAt:
              type: string
              format: date-time
            syncStatus:
              type: string
              enum: [synced, pending, error]
            conflictCount:
              type: integer
        settings:
          type: object
          properties:
            autoSync:
              type: boolean
            syncOnCellular:
              type: boolean
            backgroundSync:
              type: boolean
            notificationEnabled:
              type: boolean
        createdAt:
          type: string
          format: date-time

    TriggerSyncRequest:
      type: object
      properties:
        syncType:
          type: string
          enum: [full, incremental, recipes_only, settings_only]
          default: incremental
        force:
          type: boolean
          default: false
          description: 強制同期（競合を無視）

    SyncStatusResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            status:
              type: string
              enum: [idle, syncing, error]
            lastSyncAt:
              type: string
              format: date-time
            pendingItems:
              type: object
              properties:
                recipes:
                  type: integer
                userPreferences:
                  type: integer
                total:
                  type: integer
            conflicts:
              type: object
              properties:
                count:
                  type: integer
                types:
                  type: array
                  items:
                    type: string
            estimatedSyncTime:
              type: integer
              description: 推定同期時間（秒）

    SyncResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            syncId:
              type: string
              description: 同期セッションID
            status:
              type: string
              enum: [started, queued]
            estimatedDuration:
              type: integer
              description: 推定時間（秒）

  examples:
    SampleRecipe:
      summary: サンプルレシピ
      value:
        id: "recipe_123"
        recipeName: "簡単鶏のから揚げ"
        description: "外はカリッと中はジューシーな鶏のから揚げです"
        ingredients:
          - name: "鶏もも肉"
            amount: "500"
            unit: "g"
            category: "meat"
          - name: "しょうゆ"
            amount: "大さじ2"
            unit: ""
            category: "seasoning"
        instructions:
          - step: 1
            description: "鶏肉を一口大に切る"
            duration: "5分"
          - step: 2
            description: "調味料に30分漬ける"
            duration: "30分"
        cookingTime:
          prep: 15
          cook: 30
          total: 45
          difficulty: "easy"
        servings: "2-3人分"
        tags: ["和食", "メイン", "簡単"]
        analysisInfo:
          version: "1.0.0"
          confidence: 0.92
          functionExecutionId: "exec_abc123"
          processingTime: 165000
